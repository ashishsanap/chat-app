{"version":3,"sources":["auth/auth.service.js"],"names":["isAuthenticated","redis","require","req","res","next","bearerHeader","header","bearer","split","token","jwt","verify","process","env","JWT_SECKERT_KEY","err","authData","status","json","success","msg","getValue","user","MobileNumber","then","reply","value"],"mappings":";;;;;QAYgBA,e,GAAAA,e;;AAXhB;;;;;;AAEA;AACA,MAAMC,QAAQC,QAAQ,gCAAR,CAAd;;AAGA;;;;;AAPA;AAYO,SAASF,eAAT,CAAyBG,GAAzB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AAC9C,QAAMC,eAAeH,IAAII,MAAJ,CAAW,eAAX,CAArB;AACA,MAAI,OAAOD,YAAP,KAAwB,WAA5B,EAAyC;AACvC,UAAME,SAASF,aAAaG,KAAb,CAAmB,GAAnB,CAAf;AACA,UAAMC,QAAQF,OAAO,CAAP,CAAd;AACAG,2BAAIC,MAAJ,CAAWF,KAAX,EAAkBG,QAAQC,GAAR,CAAYC,eAA9B,EAA+C,CAACC,GAAD,EAAMC,QAAN,KAAmB;AAChE,UAAID,OAAO,OAAOC,QAAP,KAAoB,WAA/B,EAA4C;AAC1Cb,YAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,KAAK,sBAAvB,EAArB;AACD,OAFD,MAEO;AACLpB,cAAMqB,QAAN,CAAgB,GAAEL,SAASM,IAAT,CAAcC,YAAa,OAA7C,EAAqDC,IAArD,CAA2DC,KAAD,IAAW;AACnE,cAAIA,MAAMC,KAAN,KAAgBjB,KAApB,EAA2B;AACzB;AACA;AACAP,gBAAIc,QAAJ,GAAeA,SAASM,IAAxB;AACA,mBAAOlB,MAAP;AACD;AACDD,cAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,KAAK,sBAAvB,EAArB;AACD,SARD;AASD;AACF,KAdD;AAeD,GAlBD,MAkBO;AACLjB,QAAIc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,KAAX,EAAkBC,KAAK,sBAAvB,EAArB;AACD;AACD;AACD","file":"auth.service.js","sourcesContent":["/* eslint-disable max-len,import/prefer-default-export,no-shadow,consistent-return */\nimport jwt from 'jsonwebtoken';\n\n// const redisClient = require('../config/redis').redisClient;\nconst redis = require('../config/redis/redisoperation');\n\n\n/**\n * Attaches the user object to the request if authenticated\n * Otherwise returns 401\n */\n\nexport function isAuthenticated(req, res, next) {\n  const bearerHeader = req.header('Authorization');\n  if (typeof bearerHeader !== 'undefined') {\n    const bearer = bearerHeader.split(' ');\n    const token = bearer[1];\n    jwt.verify(token, process.env.JWT_SECKERT_KEY, (err, authData) => {\n      if (err || typeof authData === 'undefined') {\n        res.status(401).json({ success: false, msg: 'Unauthorised access3' });\n      } else {\n        redis.getValue(`${authData.user.MobileNumber}login`).then((reply) => {\n          if (reply.value === token) {\n            // redisClient.set(`${authData.user.PM_User_MobileNumber}`, `${req.token}`);\n            // redisClient.expire(`${authData.user.PM_User_MobileNumber}`, process.env.IDEL_SESSION_TIME); // session time\n            req.authData = authData.user;\n            return next();\n          }\n          res.status(401).json({ success: false, msg: 'Unauthorised access1' });\n        });\n      }\n    });\n  } else {\n    res.status(401).json({ success: false, msg: 'Unauthorised access4' });\n  }\n  // });\n}\n"]}