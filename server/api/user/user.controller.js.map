{"version":3,"sources":["api/user/user.controller.js"],"names":["decodePassword","create","update","get","userOTP","updatePassword","ref","DB","getDateWithoutTime","date","currentDateTime","Date","toLocaleString","split","currentDate","console","log","day","parseInt","month","year","getLastUser","resolve","reject","usersRef","child","once","snapshot","exists","limitToLast","on","childSnapshot","err","snap","val","lastUser","UserId","checkUserExist","user","mobile","then","password","key","crypto","createCipher","process","env","CRYPTO_ALGO","newPassword","final","userOperation","userExist","exist","req","res","body","obj","userID","Name","MobileNumber","Email","email","Password","Gender","DOB","CountryCode","countryCode","InterestedIn","School","Company","Job","Lat","lat","Long","long","set","jwt","sign","JWT_SECKERT_KEY","token","send","status","msg","data","catch","name","gender","interest","school","company","job","phone","authData","isSendOTP","axios","post","via","country_code","code","phone_number","code_length","headers","OTP_SECURITY_API_KEY","response","otp"],"mappings":"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","file":"user.controller.js","sourcesContent":["/* eslint-disable import/prefer-default-export,no-mixed-operators,no-unused-vars,max-len */\nimport crypto from 'crypto';\nimport axios from 'axios';\nimport jwt from 'jsonwebtoken';\n\nimport DB from '../../config/firebase';\n\nimport { set, add } from '../../config/redis/redisoperation';\n\n// const RedisClient = require('../../config/redis').redisClient;\n\nconst ref = DB.ref('server');\n// getcurrentDate\nfunction getDateWithoutTime(date) {\n  const currentDateTime = new Date(date).toLocaleString().split(',');\n  let currentDate = currentDateTime[0];\n  currentDate = currentDate.split('/');\n  console.log(currentDate);\n  const day = parseInt(currentDate[0], 10) + 1;\n  const month = parseInt(currentDate[1], 10);\n  const year = parseInt(currentDate[2], 10);\n\n  // Putting it all together\n  return `${year}-${month}-${day}`;\n}\nfunction getLastUser() {\n  return new Promise((resolve, reject) => {\n    console.log('here');\n    const usersRef = ref.child('users');\n    usersRef.once('value', (snapshot) => {\n      if (snapshot.exists()) {\n        usersRef.limitToLast(1).on('child_added', (childSnapshot, err) => {\n          const snap = childSnapshot.val();\n          resolve(snap);\n        });\n      } else {\n        const lastUser = {};\n        lastUser.UserId = 0;\n        resolve(lastUser);\n      }\n    });\n  });\n}\nfunction checkUserExist(user) {\n  return new Promise((resolve, reject) => {\n    const usersRef = ref.child(`users/${user.mobile}`);\n    usersRef.once('value').then((snap) => {\n      resolve(snap.exists());\n    });\n  });\n}\nexport function decodePassword(password) {\n  const key = crypto.createCipher(process.env.CRYPTO_ALGO, 'abc');// abc replace by some data\n  let newPassword = key.update(password, 'utf8', 'hex');\n  newPassword += key.final('hex');\n  return newPassword;\n}\nasync function userOperation(user) {\n  const userExist = await checkUserExist(user);\n  if (!userExist) {\n    const lastUser = await getLastUser();\n    return { lastUser, exist: false };\n  }\n  return { lastUser: null, exist: true };\n}\nexport function create(req, res) {\n  console.log('add user', req.body);\n  userOperation(req.body).then((obj) => {\n    console.log('obj', obj);\n    if (!obj.exist) {\n      console.log('eeee');\n      const usersRef = ref.child('users');\n      const userID = obj.lastUser.UserId + 1;\n      const password = decodePassword(req.body.password);\n      const user = {\n        UserId: userID,\n        Name: null,\n        MobileNumber: req.body.mobile,\n        Email: req.body.email,\n        Password: password,\n        Gender: null,\n        DOB: null,\n        CountryCode: req.body.countryCode,\n        InterestedIn: null,\n        School: null,\n        Company: null,\n        Job: null,\n        Lat: req.body.lat,\n        Long: req.body.long,\n      };\n      usersRef.child(user.MobileNumber)\n        .set(user);\n      delete user.Password;\n      delete user.UserId;\n      jwt.sign({ user }, process.env.JWT_SECKERT_KEY, (err, token) => {\n        if (err) {\n          return res.send({ status: false, msg: 'Something went wrong', data: user });\n        }\n        add(`${user.MobileNumber}login`, token);\n        return res.send({ status: true, msg: 'Profile is created succesfully', data: user, token });\n      });\n      // have to delete password\n    } else {\n      return res.send({ status: false, msg: 'Mobile Already Register', data: null });\n    }\n  }).catch((err) => {\n    console.log('ee', err);\n    return res.send({ status: false, msg: 'Profile is not created please try again', data: null });\n  });\n}\n\n\nexport function update(req, res) {\n  console.log(req.body);\n  const user = {\n    Name: req.body.name,\n    Gender: req.body.gender,\n    DOB: req.body.DOB,\n    InterestedIn: req.body.interest,\n    School: req.body.school,\n    Company: req.body.company,\n    Job: req.body.job,\n  };\n  if (!user.InterestedIn) {\n    delete user.InterestedIn;\n  }\n  if (!user.Name) {\n    delete user.Name;\n  }\n  if (!user.Gender) {\n    delete user.Gender;\n  }\n  if (!user.DOB) {\n    delete user.DOB;\n  }\n  if (!user.School) {\n    delete user.School;\n  }\n  if (!user.Company) {\n    delete user.Company;\n  }\n  if (!user.Job) {\n    delete user.Job;\n  }\n  DB.ref(`server/users/${req.body.phone}`).update(user);\n  res.send({ status: true, msg: 'Profile Updated Suceesfully', data: null });\n}\n\n\nexport function get(req, res) {\n  const usersRef = ref.child(`users/${req.authData.MobileNumber}`);\n  usersRef.once('value').then((snap) => {\n    if (snap.exists()) {\n      const user = snap.val();\n      console.log('user', user);\n      return res.send({ status: true, msg: 'User Information', data: user });\n    }\n    return res.send({ status: false, msg: 'Account not Found', data: null });\n  });\n}\n\nexport function userOTP(req, res) {\n  console.log(req.body);\n  if (req.body.isSendOTP) {\n    // const OTP = Math.floor(1000 + Math.random() * 9000);\n    // RedisClient.set(`OTP${req.body.code}${req.body.phone}`, OTP, (err, reply) => {\n    //   if (err) {\n    //     return res.send({ status: false, msg: 'Something went wrong', data: null });\n    //   }\n    //   // send otp logic here\n    //   console.log(OTP);\n    axios.post('https://api.authy.com/protected/json/phones/verification/start', {\n      via: 'sms',\n      country_code: req.body.code,\n      phone_number: req.body.phone,\n      code_length: 4,\n    }, { headers: { 'X-Authy-API-Key': process.env.OTP_SECURITY_API_KEY } })\n      .then(response => res.send({ status: true, msg: 'OTP is send on Phone number', data: req.body }))\n      .catch((err) => {\n        console.log(err);\n        return res.send({ status: false, msg: 'Something went wrong', data: null });\n      });\n\n    // });\n  } else {\n    axios.get(`https://api.authy.com/protected/json/phones/verification/check?X-Authy-API-Key=\n  ${process.env.OTP_SECURITY_API_KEY}&phone_number=\n  ${req.body.phone}&country_code=${req.body.code}&verification_code=${req.body.otp}`,\n    { headers: { 'X-Authy-API-Key': process.env.OTP_SECURITY_API_KEY } })\n      .then(response => res.send({ status: true, msg: 'OTP is correct', data: req.body }))\n      .catch(err => res.send({ status: false, msg: 'OTP is wrong', data: null }));\n\n\n    // RedisClient.get(`OTP${req.body.code}${req.body.phone}`, (err, otp) => {\n    //   if (err) {\n    //     return res.send({ status: false, msg: 'Something went wrong', data: null });\n    //   } else if (otp === req.body.otp) {\n    //     RedisClient.del(`OTP${req.body.code}${req.body.phone}`);\n    //     return res.send({ status: true, msg: 'OTP is correct', data: req.body });\n    //   }\n    //   return res.send({ status: false, msg: 'OTP is wrong', data: null });\n    // });\n  }\n}\nexport function updatePassword(req, res) {\n  const user = {\n    Password: decodePassword(req.body.password),\n  };\n  DB.ref(`server/users/${req.body.phone}`).update(user);\n  res.send({ status: true, msg: 'Password updated succesfully', data: null });\n}\n"]}