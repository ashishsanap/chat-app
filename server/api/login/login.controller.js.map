{"version":3,"sources":["api/login/login.controller.js"],"names":["index","get","ref","DB","req","res","console","log","usersRef","child","body","mobile","once","then","snap","exists","user","val","Password","password","UserId","jwt","sign","process","env","JWT_SECKERT_KEY","err","token","send","status","msg","data","MobileNumber"],"mappings":";;;;;QASgBA,K,GAAAA,K;QAuBAC,G,GAAAA,G;;AA/BhB;;;;AAEA;;;;AACA;;AACA;;;;AALA;AAQA,MAAMC,MAAMC,mBAAGD,GAAH,CAAO,QAAP,CAAZ;AACO,SAASF,KAAT,CAAeI,GAAf,EAAoBC,GAApB,EAAyB;AAC9BC,UAAQC,GAAR,CAAY,KAAZ;AACA,QAAMC,WAAWN,IAAIO,KAAJ,CAAW,SAAQL,IAAIM,IAAJ,CAASC,MAAO,EAAnC,CAAjB;AACAH,WAASI,IAAT,CAAc,OAAd,EAAuBC,IAAvB,CAA6BC,IAAD,IAAU;AACpC,QAAIA,KAAKC,MAAL,EAAJ,EAAmB;AACjB,YAAMC,OAAOF,KAAKG,GAAL,EAAb;AACA,UAAID,KAAKE,QAAL,KAAkB,0BAAed,IAAIM,IAAJ,CAASS,QAAxB,CAAtB,EAAyD;AACvD,eAAOH,KAAKI,MAAZ;AACA,eAAOJ,KAAKE,QAAZ;AACAG,+BAAIC,IAAJ,CAAS,EAAEN,IAAF,EAAT,EAAmBO,QAAQC,GAAR,CAAYC,eAA/B,EAAgD,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC9D,cAAID,GAAJ,EAAS;AACP,mBAAOrB,IAAIuB,IAAJ,CAAS,EAAEC,QAAQ,KAAV,EAAiBC,KAAK,sBAAtB,EAA8CC,MAAMf,IAApD,EAAT,CAAP;AACD;AACD,mCAAK,GAAEA,KAAKgB,YAAa,OAAzB,EAAiCL,KAAjC;AACA,iBAAOtB,IAAIuB,IAAJ,CAAS,EAAEC,QAAQ,IAAV,EAAgBC,KAAK,mBAArB,EAA0CC,MAAMf,IAAhD,EAAsDW,KAAtD,EAAT,CAAP;AACD,SAND;AAOD,OAVD,MAUO;AAAE,eAAOtB,IAAIuB,IAAJ,CAAS,EAAEC,QAAQ,KAAV,EAAiBC,KAAK,uBAAtB,EAA+CC,MAAM,IAArD,EAAT,CAAP;AAA+E;AACzF,KAbD,MAaO;AACL,aAAO1B,IAAIuB,IAAJ,CAAS,EAAEC,QAAQ,KAAV,EAAiBC,KAAK,mBAAtB,EAA2CC,MAAM,IAAjD,EAAT,CAAP;AACD;AACF,GAjBD;AAkBD;;AAEM,SAAS9B,GAAT,CAAaG,GAAb,EAAkBC,GAAlB,EAAuB;AAC5BA,MAAIuB,IAAJ,CAAS,EAAEG,MAAM,MAAR,EAAT;AACD","file":"login.controller.js","sourcesContent":["/* eslint-disable import/prefer-default-export,consistent-return */\nimport jwt from 'jsonwebtoken';\n\nimport DB from '../../config/firebase';\nimport { decodePassword } from '../user/user.controller';\nimport { set, add } from '../../config/redis/redisoperation';\n\n\nconst ref = DB.ref('server');\nexport function index(req, res) {\n  console.log('eee');\n  const usersRef = ref.child(`users/${req.body.mobile}`);\n  usersRef.once('value').then((snap) => {\n    if (snap.exists()) {\n      const user = snap.val();\n      if (user.Password === decodePassword(req.body.password)) {\n        delete user.UserId;\n        delete user.Password;\n        jwt.sign({ user }, process.env.JWT_SECKERT_KEY, (err, token) => {\n          if (err) {\n            return res.send({ status: false, msg: 'Something went wrong', data: user });\n          }\n          add(`${user.MobileNumber}login`, token);\n          return res.send({ status: true, msg: 'Login succesfully', data: user, token });\n        });\n      } else { return res.send({ status: false, msg: 'Login Not succesfully', data: null }); }\n    } else {\n      return res.send({ status: false, msg: 'Account not Found', data: null });\n    }\n  });\n}\n\nexport function get(req, res) {\n  res.send({ data: 'work' });\n}\n"]}